require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ObservationsController do

#  # This should return the minimal set of attributes required to create a valid
#  # Observation. As you add validations to Observation, be sure to
#  # update the return value of this method accordingly.
#  def valid_attributes
#    {}
#  end
#  
#  # This should return the minimal set of values that should be in the session
#  # in order to pass any filters (e.g. authentication) defined in
#  # ObservationsController. Be sure to keep this updated too.
#  def valid_session
#    {}
#  end
#
#  describe "GET index" do
#    it "assigns all observations as @observations" do
#      observation = Observation.create! valid_attributes
#      get :index, {}, valid_session
#      assigns(:observations).should eq([observation])
#    end
#  end
#
#  describe "GET show" do
#    it "assigns the requested observation as @observation" do
#      observation = Observation.create! valid_attributes
#      get :show, {:id => observation.to_param}, valid_session
#      assigns(:observation).should eq(observation)
#    end
#  end
#
#  describe "GET new" do
#    it "assigns a new observation as @observation" do
#      get :new, {}, valid_session
#      assigns(:observation).should be_a_new(Observation)
#    end
#  end
#
#  describe "GET edit" do
#    it "assigns the requested observation as @observation" do
#      observation = Observation.create! valid_attributes
#      get :edit, {:id => observation.to_param}, valid_session
#      assigns(:observation).should eq(observation)
#    end
#  end
#
#  describe "POST create" do
#    describe "with valid params" do
#      it "creates a new Observation" do
#        expect {
#          post :create, {:observation => valid_attributes}, valid_session
#        }.to change(Observation, :count).by(1)
#      end
#
#      it "assigns a newly created observation as @observation" do
#        post :create, {:observation => valid_attributes}, valid_session
#        assigns(:observation).should be_a(Observation)
#        assigns(:observation).should be_persisted
#      end
#
#      it "redirects to the created observation" do
#        post :create, {:observation => valid_attributes}, valid_session
#        response.should redirect_to(Observation.last)
#      end
#    end
#
#    describe "with invalid params" do
#      it "assigns a newly created but unsaved observation as @observation" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        Observation.any_instance.stub(:save).and_return(false)
#        post :create, {:observation => {}}, valid_session
#        assigns(:observation).should be_a_new(Observation)
#      end
#
#      it "re-renders the 'new' template" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        Observation.any_instance.stub(:save).and_return(false)
#        post :create, {:observation => {}}, valid_session
#        response.should render_template("new")
#      end
#    end
#  end
#
#  describe "PUT update" do
#    describe "with valid params" do
#      it "updates the requested observation" do
#        observation = Observation.create! valid_attributes
#        # Assuming there are no other observations in the database, this
#        # specifies that the Observation created on the previous line
#        # receives the :update_attributes message with whatever params are
#        # submitted in the request.
#        Observation.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
#        put :update, {:id => observation.to_param, :observation => {'these' => 'params'}}, valid_session
#      end
#
#      it "assigns the requested observation as @observation" do
#        observation = Observation.create! valid_attributes
#        put :update, {:id => observation.to_param, :observation => valid_attributes}, valid_session
#        assigns(:observation).should eq(observation)
#      end
#
#      it "redirects to the observation" do
#        observation = Observation.create! valid_attributes
#        put :update, {:id => observation.to_param, :observation => valid_attributes}, valid_session
#        response.should redirect_to(observation)
#      end
#    end
#
#    describe "with invalid params" do
#      it "assigns the observation as @observation" do
#        observation = Observation.create! valid_attributes
#        # Trigger the behavior that occurs when invalid params are submitted
#        Observation.any_instance.stub(:save).and_return(false)
#        put :update, {:id => observation.to_param, :observation => {}}, valid_session
#        assigns(:observation).should eq(observation)
#      end
#
#      it "re-renders the 'edit' template" do
#        observation = Observation.create! valid_attributes
#        # Trigger the behavior that occurs when invalid params are submitted
#        Observation.any_instance.stub(:save).and_return(false)
#        put :update, {:id => observation.to_param, :observation => {}}, valid_session
#        response.should render_template("edit")
#      end
#    end
#  end
#
#  describe "DELETE destroy" do
#    it "destroys the requested observation" do
#      observation = Observation.create! valid_attributes
#      expect {
#        delete :destroy, {:id => observation.to_param}, valid_session
#      }.to change(Observation, :count).by(-1)
#    end
#
#    it "redirects to the observations list" do
#      observation = Observation.create! valid_attributes
#      delete :destroy, {:id => observation.to_param}, valid_session
#      response.should redirect_to(observations_url)
#    end
#  end

end
