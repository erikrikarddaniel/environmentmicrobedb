require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe OrfAasController do

  before(:each) do
    @fgs10 = fixture_file_upload('/fraggenescan.10.faa')
    @fgs100 = fixture_file_upload('/fraggenescan.100.faa')
    @fgs10000 = fixture_file_upload('/fraggenescan.10000.faa')
  end

  # This should return the minimal set of attributes required to create a valid
  # OrfAa. As you add validations to OrfAa, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      identifier: 'test orf',
      assembly_id: FactoryGirl.create(:assembly).id
    }
  end
  
  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OrfAasController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all orf_aas as @orf_aas" do
      orf_aa = OrfAa.create! valid_attributes
      get :index, {}, valid_session
      assigns(:orf_aas).should eq([orf_aa])
    end
  end

  describe "GET show" do
    it "assigns the requested orf_aa as @orf_aa" do
      orf_aa = OrfAa.create! valid_attributes
      get :show, {:id => orf_aa.to_param}, valid_session
      assigns(:orf_aa).should eq(orf_aa)
    end
  end

  describe "GET new" do
    it "assigns a new orf_aa as @orf_aa" do
      get :new, {}, valid_session
      assigns(:orf_aa).should be_a_new(OrfAa)
    end
  end

  describe "GET edit" do
    it "assigns the requested orf_aa as @orf_aa" do
      orf_aa = OrfAa.create! valid_attributes
      get :edit, {:id => orf_aa.to_param}, valid_session
      assigns(:orf_aa).should eq(orf_aa)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new OrfAa" do
        expect {
          post :create, {:orf_aa => valid_attributes.merge(:file => @fgs10) }, valid_session
        }.to change(OrfAa, :count).by(5)
      end

#      it "assigns a newly created orf_aa as @orf_aa" do
#        post :create, {:orf_aa => valid_attributes}, valid_session
#        assigns(:orf_aa).should be_a(OrfAa)
#        assigns(:orf_aa).should be_persisted
#      end

#      it "redirects to the assembly object" do
#        post :create, {:orf_aa => valid_attributes}, valid_session
#        response.should redirect_to(Assembly.find(valid_attributes[:assembly_id]))
#      end
    end

#    describe "with invalid params" do
#      it "assigns a newly created but unsaved orf_aa as @orf_aa" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        OrfAa.any_instance.stub(:save).and_return(false)
#        post :create, {:orf_aa => {}}, valid_session
#        assigns(:orf_aa).should be_a_new(OrfAa)
#      end
#
#      it "re-renders the 'new' template" do
#        # Trigger the behavior that occurs when invalid params are submitted
#        OrfAa.any_instance.stub(:save).and_return(false)
#        post :create, {:orf_aa => {}}, valid_session
#        response.should render_template("new")
#      end
#    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested orf_aa" do
        orf_aa = OrfAa.create! valid_attributes
        # Assuming there are no other orf_aas in the database, this
        # specifies that the OrfAa created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        OrfAa.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => orf_aa.to_param, :orf_aa => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested orf_aa as @orf_aa" do
        orf_aa = OrfAa.create! valid_attributes
        put :update, {:id => orf_aa.to_param, :orf_aa => valid_attributes}, valid_session
        assigns(:orf_aa).should eq(orf_aa)
      end

      it "redirects to the orf_aa" do
        orf_aa = OrfAa.create! valid_attributes
        put :update, {:id => orf_aa.to_param, :orf_aa => valid_attributes}, valid_session
        response.should redirect_to(orf_aa)
      end
    end

    describe "with invalid params" do
      it "assigns the orf_aa as @orf_aa" do
        orf_aa = OrfAa.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        OrfAa.any_instance.stub(:save).and_return(false)
        put :update, {:id => orf_aa.to_param, :orf_aa => {}}, valid_session
        assigns(:orf_aa).should eq(orf_aa)
      end

      it "re-renders the 'edit' template" do
        orf_aa = OrfAa.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        OrfAa.any_instance.stub(:save).and_return(false)
        put :update, {:id => orf_aa.to_param, :orf_aa => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested orf_aa" do
      orf_aa = OrfAa.create! valid_attributes
      expect {
        delete :destroy, {:id => orf_aa.to_param}, valid_session
      }.to change(OrfAa, :count).by(-1)
    end

    it "redirects to the orf_aas list" do
      orf_aa = OrfAa.create! valid_attributes
      delete :destroy, {:id => orf_aa.to_param}, valid_session
      response.should redirect_to(orf_aas_url)
    end
  end

end
